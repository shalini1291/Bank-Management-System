create or replace TRIGGER SCHEDULED_TRANSFER_UPDATE_LOG
BEFORE UPDATE ON SCHEDULED_TRANSFER
FOR EACH ROW
BEGIN
    IF UPDATING('AMOUNT') THEN
        IF :OLD.AMOUNT <> :NEW.AMOUNT THEN
            INSERT INTO SCHEDULED_TRANSFER_LOG
            (TRANSFER_ID, UPDATED_COLUMN, OLD_VALUE, NEW_VALUE)
            VALUES
            (:OLD.TRANSFER_ID, 'AMOUNT', :OLD.AMOUNT, :NEW.AMOUNT);
        
        END IF;
    END IF;

    IF UPDATING('SCHEDULED_DATE') THEN
        IF :OLD.SCHEDULED_DATE <> :NEW.SCHEDULED_DATE AND :NEW.SCHEDULED_DATE >= SYSDATE THEN
            INSERT INTO SCHEDULED_TRANSFER_LOG
            (TRANSFER_ID, UPDATED_COLUMN, OLD_VALUE, NEW_VALUE)
            VALUES
            (:OLD.TRANSFER_ID, 'SCHEDULED_DATE', :OLD.SCHEDULED_DATE, :NEW.SCHEDULED_DATE);
        
        END IF;
    END IF;

   
    IF UPDATING('TRANSFER_ID') THEN
        RAISE_APPLICATION_ERROR(-20013,'TRANSFER ID CANNOT BE UPDATED');
    END IF;

    IF UPDATING('FROM_ACCOUNT_ID') THEN
        RAISE_APPLICATION_ERROR(-20013,'FROM_ACCOUNT_ID CANNOT BE UPDATED');
    END IF;

    IF UPDATING('TO_ACCOUNT_ID') THEN
        RAISE_APPLICATION_ERROR(-20013,'TO_ACCOUNT_ID CANNOT BE UPDATED');
    END IF;

    IF UPDATING('STATUS') THEN
        RAISE_APPLICATION_ERROR(-20013,'STATUS CANNOT BE UPDATED, IT IS UPDATED USING SCHEDULED DATE');
    END IF;

    IF UPDATING('CREATED_AT') THEN
        RAISE_APPLICATION_ERROR(-20013,'CREATED_AT CANNOT BE UPDATED, IT IS THE DEFAULT VALUE');
    END IF;
END;
/