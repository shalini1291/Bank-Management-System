create or replace PACKAGE BODY BANK_PKG
IS
    -- CHECK IF BANK BRANCH EXISTS IN BANK TABLE! NO DUPLICATES ALLOWED.
    FUNCTION CHECK_NULLS_ADD_BANK_BRANCH 
        (
            P_BANK_NAME_	BANK.BANK_NAME%TYPE,
            P_IFSC_CODE_	BANK.IFSC_CODE%TYPE,
            P_BRANCH_NAME_	BANK.BRANCH_NAME%TYPE,
            P_BUILDING_NUMBER_	BANK.BUILDING_NUMBER%TYPE,
            P_STREET_	BANK.STREET%TYPE,
            P_CITY_	BANK.CITY%TYPE,
            P_PINCODE_ BANK.PINCODE%TYPE,
            P_DISTRICT_	BANK.DISTRICT%TYPE,
            P_STATE_	BANK.STATE%TYPE,
            P_COUNTRY_	 BANK.COUNTRY%TYPE
        )
        RETURN BOOLEAN IS
        BEGIN
        IF P_BANK_NAME_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20300,'GIVE VALID BANK NAME');
            RETURN FALSE;
        END IF ;
        IF P_IFSC_CODE_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20301,'GIVE VALID BANK IFSC CODE');
            RETURN FALSE;
        END IF ;
        IF P_BRANCH_NAME_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20302,'GIVE VALID BRANCH NAME');
            RETURN FALSE;
        END IF ;
        IF P_BUILDING_NUMBER_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20303,'GIVE VALID BUILDING  NUMBER');
            RETURN FALSE;
        END IF ;
        IF P_STREET_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20304,'GIVE VALID STREET NAME');
            RETURN FALSE;
        END IF ;
        IF P_CITY_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20305,'GIVE VALID CITY NAME');
            RETURN FALSE;
        END IF ;
        IF P_PINCODE_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20306,'GIVE VALID PINCODE');
            RETURN FALSE;
        END IF ;
        IF P_DISTRICT_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20307,'GIVE VALID DISTRICT NAME');
            RETURN FALSE;
        END IF ;
        IF P_STATE_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20308,'GIVE VALID STATE NAME');
            RETURN FALSE;
        END IF ;
        IF P_COUNTRY_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20309,'GIVE VALID COUNTRY NAME');
            RETURN FALSE;
        END IF ;
        RETURN TRUE;
    END CHECK_NULLS_ADD_BANK_BRANCH;
    
    FUNCTION CHECK_BANK_BRANCH_NAME_EXISTS(P_BRANCH_NAME IN OUT  BANK.BRANCH_NAME%TYPE) RETURN BOOLEAN
    IS
        V_BRANCH_NAME BANK.BRANCH_NAME%TYPE;
    BEGIN
        P_BRANCH_NAME := UPPER(P_BRANCH_NAME);
        BEGIN
            SELECT BRANCH_NAME INTO V_BRANCH_NAME FROM BANK WHERE BRANCH_NAME = P_BRANCH_NAME;
            RETURN TRUE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN FALSE;
        END;
    END CHECK_BANK_BRANCH_NAME_EXISTS;

    --  
    FUNCTION CHECK_IFSC_EXISTS(P_IFSCCODE BANK.IFSC_CODE%TYPE) RETURN BOOLEAN
    IS
    IFSCCODE_COUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO IFSCCODE_COUNT FROM BANK WHERE IFSC_CODE = P_IFSCCODE;
        IF IFSCCODE_COUNT = 0 THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END CHECK_IFSC_EXISTS;


    FUNCTION VALID_IFSC(P_IFSC_CODE IN VARCHAR2) RETURN BOOLEAN
    IS
    BEGIN
        -- Check if the length of IFSC_CODE is 11 characters
        IF LENGTH(P_IFSC_CODE) !=11 THEN
            RAISE_APPLICATION_ERROR(-20310,'THE LENGTH IS NOT MATCHING');
        END IF;
            -- Check if the first four characters are alphabetic
        IF NOT(REGEXP_LIKE(SUBSTR(P_IFSC_CODE, 1, 4), '^[A-Z]{4}$')) THEN
            RAISE_APPLICATION_ERROR(-20311,'THE BANK CODE IS NOT VALID');
        END IF;
                -- Check if the fifth character is '0'
        IF NOT(SUBSTR(P_IFSC_CODE, 5, 1) = '0') THEN
            RAISE_APPLICATION_ERROR(-20312,'THE BANK CODE IS NOT VALID FOR FUTURE USE');
        END IF;
                    -- Check if the last six characters are alphanumeric
        IF REGEXP_LIKE(SUBSTR(P_IFSC_CODE, 6, 6), '^[A-Z0-9]{6}$') THEN
                        RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END VALID_IFSC;

    FUNCTION VALIDATE_PINCODE(P_PIN_CODE BANK.PINCODE%TYPE) RETURN NUMBER
    IS
    BEGIN
        IF LENGTH(P_PIN_CODE) <> 6 THEN
            RETURN 1;
        ELSIF REGEXP_LIKE(P_PIN_CODE, '^[0-9]{6}$') = FALSE THEN
            RETURN 2;
        ELSE
            RETURN 0;
        END IF;
    END VALIDATE_PINCODE;

    PROCEDURE ADD_BANK_BRANCH
    (
        P_BANK_NAME	BANK.BANK_NAME%TYPE,
     	P_IFSC_CODE	BANK.IFSC_CODE%TYPE,
     	P_BRANCH_NAME	BANK.BRANCH_NAME%TYPE,
     	P_BUILDING_NUMBER	BANK.BUILDING_NUMBER%TYPE,
     	P_STREET	BANK.STREET%TYPE,
     	P_CITY	BANK.CITY%TYPE,
     	P_PINCODE BANK.PINCODE%TYPE,
     	P_DISTRICT	BANK.DISTRICT%TYPE,
     	P_STATE	BANK.STATE%TYPE,
     	P_COUNTRY	 BANK.COUNTRY%TYPE
    )
    IS
        V_BRANCH_NAME BANK.BRANCH_NAME%TYPE;
    BEGIN
        IF  CHECK_NULLS_ADD_BANK_BRANCH(
            P_IFSC_CODE_ => P_IFSC_CODE	,
            P_BRANCH_NAME_ => P_BRANCH_NAME,
            P_BUILDING_NUMBER_ => P_BUILDING_NUMBER,
            P_BANK_NAME_ => P_BANK_NAME,
            P_STREET_ => P_STREET,
            P_CITY_ => P_CITY,
            P_PINCODE_ => P_PINCODE,
            P_DISTRICT_ => P_DISTRICT,
            P_STATE_ => P_STATE,
            P_COUNTRY_ => P_COUNTRY
            )   THEN
              
        V_BRANCH_NAME := P_BRANCH_NAME;

        IF VALID_IFSC(P_IFSC_CODE)=FALSE  THEN
            RAISE_APPLICATION_ERROR(-20013,'INVALID IFSC FORMAT!');
        END IF;

        IF VALIDATE_PINCODE(P_PINCODE) = 1 THEN
            RAISE_APPLICATION_ERROR(-20014,'LENGTH OF PINCODE SHOULD BE 6!');

        ELSIF VALIDATE_PINCODE(P_PINCODE) = 2 THEN
            RAISE_APPLICATION_ERROR(-20015,'INVALID FORMAT, ONLY NUMBER ALLOWED!');
        END IF;

        IF CHECK_BANK_BRANCH_NAME_EXISTS(V_BRANCH_NAME) = TRUE THEN
            RAISE_APPLICATION_ERROR(-20016, 'BANK BRANCH ALREADY EXISTS!');
        END IF;

        IF CHECK_IFSC_EXISTS(P_IFSC_CODE) = FALSE THEN
            RAISE_APPLICATION_ERROR(-20017, 'IFSC CODE ALREADY EXISTS!');
        END IF;

        INSERT INTO BANK
        (
            BANK_NAME,
            IFSC_CODE,	
         	BRANCH_NAME	,
         	BUILDING_NUMBER	,
         	STREET	,
         	CITY,	
         	PINCODE,
         	DISTRICT,	
         	STATE,	
         	COUNTRY
        ) VALUES
        (
            UPPER(P_BANK_NAME),
            P_IFSC_CODE,	
         	UPPER(V_BRANCH_NAME)	,
         	P_BUILDING_NUMBER	,
         	UPPER(P_STREET)	,
         	UPPER(P_CITY),	
         	P_PINCODE,
         	UPPER(P_DISTRICT),	
         	UPPER(P_STATE),	
         	UPPER(P_COUNTRY)
        );
        END IF;
        
        DBMS_OUTPUT.PUT_LINE(RPAD('THE NEW BANK   INSERTED IS',18) || ' : ' || P_BANK_NAME);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE BANK IFSC CODE IS ',18) || ' : ' || P_IFSC_CODE);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE BRANCH NAME IS ',18) || ' : ' || P_BRANCH_NAME);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE BUILDING NO IS ',18) || ' : ' || P_BUILDING_NUMBER);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE STREET NAME IS ',18) || ' : ' || P_STREET);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE CITY IS ',18) || ' : ' || P_CITY);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE PINCODE IS ',18) || ' : ' || P_PINCODE);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE DISTRICT IS ',18) || ' : ' || P_DISTRICT);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE STATE IS ',18) || ' : ' || P_STATE);
        DBMS_OUTPUT.PUT_LINE(RPAD('THE COUNTRY IS ',18) || ' : ' || P_COUNTRY);
    END ADD_BANK_BRANCH;

END BANK_PKG;
/