create or replace PACKAGE BODY USER_PKG IS

    -- CHECKING AADHAAR IF IT EXISTS IN TABLE.
    FUNCTION CHECK_AADHAR_EXISTS(AADHAR IN VARCHAR2) RETURN BOOLEAN IS
        AADHAR_COUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO AADHAR_COUNT FROM USERS WHERE AADHAR_NUMBER = AADHAR;
        RETURN AADHAR_COUNT > 0; -- Simplified the return condition
    END CHECK_AADHAR_EXISTS;

    -- CHECK IF PAN CARD EXISTS IN TABLE
    FUNCTION check_pan_exists(pan IN VARCHAR2) RETURN BOOLEAN IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM users WHERE pan_number = pan;
        RETURN v_count > 0;
    END check_pan_exists;

    -- GET ADDRESS_ID FROM ADDRESS TABLE IF NOT EXISTS OR ADD NEW ROW INTO ADDRESS
   FUNCTION GET_ADDRESS_ID(
        P_H_NO     IN VARCHAR2,
        P_STREET   IN VARCHAR2,
        P_CITY     IN VARCHAR2,
        P_PINCODE  IN VARCHAR2,
        P_DISTRICT IN VARCHAR2,
        P_STATE    IN VARCHAR2,
        P_COUNTRY  IN VARCHAR2
    ) RETURN VARCHAR2 IS
        ADDRESSID VARCHAR2(40);
    BEGIN
        SELECT ADDRESS_ID INTO ADDRESSID
        FROM USER_ADDRESS
        WHERE H_NO = P_H_NO AND STREET = P_STREET AND CITY = P_CITY
        AND PINCODE = P_PINCODE AND DISTRICT = P_DISTRICT AND STATE = P_STATE AND COUNTRY = P_COUNTRY;

        RETURN ADDRESSID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO USER_ADDRESS (ADDRESS_ID, H_NO, STREET, CITY, PINCODE, DISTRICT, STATE, COUNTRY)
            VALUES ('UAD' || LPAD(USER_ADDRESS_SEQ.NEXTVAL, 5, '0'), P_H_NO, UPPER(P_STREET), UPPER(P_CITY), P_PINCODE, UPPER(P_DISTRICT), UPPER(P_STATE), UPPER(P_COUNTRY))
            RETURNING ADDRESS_ID INTO ADDRESSID;
            RETURN ADDRESSID;
    END GET_ADDRESS_ID;

    -- VALIDATE AADHAAR ACCORDING TO RULES!
    FUNCTION VALIDATE_AADHAR(P_AADHAR_NUMBER IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN LENGTH(P_AADHAR_NUMBER) = 12; -- Removed unnecessary nested IF-ELSE
    END VALIDATE_AADHAR;

    -- VALIDATE DATE OF BIRTH OF USER
    FUNCTION VALIDATE_DOB(dateObirth DATE) RETURN BOOLEAN IS 
        AGE NUMBER;
    BEGIN
        AGE := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM dateObirth);

        IF TO_CHAR(SYSDATE,'MMDD') < TO_CHAR(dateObirth,'MMDD') THEN
            AGE := AGE - 1;
        END IF;

        RETURN AGE >= 18;
    END VALIDATE_DOB;

    -- VALIDATE EMAIL ADDRESS ACCORDING TO RULES
    FUNCTION validate_email(email IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN REGEXP_LIKE(email, '^\w+(\.\w+)*@\w+(\.\w+)+$'); -- Corrected the regular expression
    END validate_email;

    -- VALIDATE PAN NUMBER ACCCODING TO RULES
    FUNCTION VALIDATE_PAN(P_PAN_NUMBER IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN REGEXP_LIKE(P_PAN_NUMBER, '^[A-Z]{5}[0-9]{4}[A-Z]$', 'i');
    END VALIDATE_PAN;

    FUNCTION VALIDATE_PHONE_NUMBER(PHONE IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN LENGTH(PHONE) = 10 AND TO_NUMBER(PHONE) IS NOT NULL;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            RETURN FALSE;
    END VALIDATE_PHONE_NUMBER;

    -- CHECKING NULL VALUES INSERTION
    FUNCTION CHECK_NULL_USERS(
        P_FIRST_NAME_    IN USERS.FIRST_NAME%TYPE,
        P_LAST_NAME_     IN USERS.LAST_NAME%TYPE,
        P_PHONE_NUMBER_  IN USERS.PHONE_NUMBER%TYPE,
        P_EMAIL_         IN USERS.EMAIL%TYPE,
        P_DOB_           IN USERS.DOB%TYPE,
        P_GENDER_        IN USERS.GENDER%TYPE,
        P_AADHAR_NUMBER_ IN USERS.AADHAR_NUMBER%TYPE,
        P_PAN_NUMBER_    IN USERS.PAN_NUMBER%TYPE,
        P_H_NO_          IN USER_ADDRESS.H_NO%TYPE,
        P_STREET_        IN USER_ADDRESS.STREET%TYPE,
        P_CITY_          IN USER_ADDRESS.CITY%TYPE,
        P_PINCODE_       IN USER_ADDRESS.PINCODE%TYPE,
        P_DISTRICT_      IN USER_ADDRESS.DISTRICT%TYPE,
        P_STATE_         IN USER_ADDRESS.STATE%TYPE,
        P_COUNTRY_       IN USER_ADDRESS.COUNTRY%TYPE
    ) RETURN BOOLEAN IS
    BEGIN
        IF P_FIRST_NAME_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20010, 'FIRST NAME IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_LAST_NAME_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20011, 'LAST NAME IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_PHONE_NUMBER_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20012, 'PHONE NUMBER IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_EMAIL_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20013, 'EMAIL IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_DOB_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20014, 'DATE OF BIRTH IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_GENDER_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20014, 'GENDER IS REQUIRED.');
            RETURN FALSE;

        ELSIF P_AADHAR_NUMBER_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20016, 'AADHAR NUMBER IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_PAN_NUMBER_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20017, 'PAN NUMBER IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_H_NO_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20100, 'HOUSE NUMBER IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_STREET_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20101, 'STREET IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_CITY_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20102, 'CITY IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_PINCODE_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20103, 'PINCODE IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_DISTRICT_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20104, 'DISTRICT IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_STATE_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20105, 'STATE IS REQUIRED.');
            RETURN FALSE;
        ELSIF P_COUNTRY_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20106, 'COUNTRY IS REQUIRED.');
            RETURN FALSE;
        ELSE
            RETURN TRUE;
        END IF;
    END CHECK_NULL_USERS;

    FUNCTION GET_AADHAR_PAN_FROM_IDENTITY_INFO( AADHAR IDENTITY_INFO.AADHAR_NUMBER%TYPE ) 
    RETURN USER_PKG.IDENTITY_RECORD_TYPE
    IS
    IDENTITY_RECORD  USER_PKG.IDENTITY_RECORD_TYPE;
    BEGIN
        SELECT AADHAR_NUMBER, PAN_NUMBER INTO IDENTITY_RECORD  FROM IDENTITY_INFO WHERE AADHAR_NUMBER = AADHAR;
        RETURN IDENTITY_RECORD;
    END GET_AADHAR_PAN_FROM_IDENTITY_INFO;

    PROCEDURE ADD_USER(
        P_FIRST_NAME    IN USERS.FIRST_NAME%TYPE,
        P_LAST_NAME     IN USERS.LAST_NAME%TYPE,
        P_PHONE_NUMBER  IN USERS.PHONE_NUMBER%TYPE,
        P_EMAIL         IN USERS.EMAIL%TYPE,
        P_DOB           IN USERS.DOB%TYPE,
        P_GENDER        IN USERS.GENDER%TYPE,
        P_AADHAR_NUMBER IN USERS.AADHAR_NUMBER%TYPE,
        P_PAN_NUMBER    IN USERS.PAN_NUMBER%TYPE,

        P_H_NO          IN USER_ADDRESS.H_NO%TYPE,
        P_STREET        IN USER_ADDRESS.STREET%TYPE,
        P_CITY          IN USER_ADDRESS.CITY%TYPE,
        P_PINCODE       IN USER_ADDRESS.PINCODE%TYPE,
        P_DISTRICT      IN USER_ADDRESS.DISTRICT%TYPE,
        P_STATE         IN USER_ADDRESS.STATE%TYPE,
        P_COUNTRY       IN USER_ADDRESS.COUNTRY%TYPE
    ) IS
        V_ADDRESS_ID VARCHAR2(40);
        V_AADHAR_PAN USER_PKG.IDENTITY_RECORD_TYPE;
    BEGIN
       
        IF CHECK_NULL_USERS(
            P_FIRST_NAME_ => P_FIRST_NAME,
            P_LAST_NAME_ => P_LAST_NAME,
            P_PHONE_NUMBER_ => P_PHONE_NUMBER,
            P_EMAIL_ => P_EMAIL,
            P_DOB_ => P_DOB,
            P_GENDER_ => P_GENDER,
            P_AADHAR_NUMBER_ => P_AADHAR_NUMBER,
            P_PAN_NUMBER_ => P_PAN_NUMBER,
            P_H_NO_ => P_H_NO,
            P_STREET_ => P_STREET,
            P_CITY_ => P_CITY,
            P_PINCODE_ => P_PINCODE,
            P_DISTRICT_ => P_DISTRICT,
            P_STATE_ => P_STATE,
            P_COUNTRY_ => P_COUNTRY
        ) THEN
            IF CHECK_AADHAR_EXISTS(P_AADHAR_NUMBER) THEN
                RAISE_APPLICATION_ERROR(-20001, 'ALREADY AADHAR EXISTS!');
            END IF;

            IF NOT VALIDATE_AADHAR(P_AADHAR_NUMBER) THEN
                RAISE_APPLICATION_ERROR(-20002, 'INVALID AADHAAR FORMAT, ENTER PROPER AADHAR NUMBER!');
            END IF; 

            IF check_pan_exists(P_PAN_NUMBER) THEN
                RAISE_APPLICATION_ERROR(-20003, 'ALREADY PAN NUMBER EXISTS!!');
            END IF;

            IF NOT VALIDATE_PAN(P_PAN_NUMBER) THEN
                RAISE_APPLICATION_ERROR(-20004, 'INVALID PAN FORMAT, ENTER PROPER PAN NUMBER!');
            END IF;                    

            IF NOT VALIDATE_DOB(P_DOB) THEN
                RAISE_APPLICATION_ERROR(-20005, 'INVALID AGE, UNDERAGE!');
            END IF;

            IF NOT validate_email(P_EMAIL) THEN
                RAISE_APPLICATION_ERROR(-20006, 'INVALID EMAIL FORMAT, ENTER PROPER EMAIL ADDRESS!');
            END IF;

            IF NOT VALIDATE_PHONE_NUMBER(P_PHONE_NUMBER) THEN
                RAISE_APPLICATION_ERROR(-20007, 'INVALID PHONE NUMBER, USE NUMBERS OR 10 LENGTH!, ENTER PROPER PHONE NUMBER!');
            END IF;        

            V_ADDRESS_ID := GET_ADDRESS_ID(P_H_NO, P_STREET, P_CITY, P_PINCODE, P_DISTRICT, P_STATE, P_COUNTRY);

            V_AADHAR_PAN :=  GET_AADHAR_PAN_FROM_IDENTITY_INFO(AADHAR => P_AADHAR_NUMBER);

            IF P_AADHAR_NUMBER <> V_AADHAR_PAN.AADHAR OR P_PAN_NUMBER <> V_AADHAR_PAN.PAN THEN
                RAISE_APPLICATION_ERROR(-20018, 'PROVIDED AADHAR AND PAN NOT LINKED');
            END IF;

            INSERT INTO USERS 
            (   USER_ID, 
                FIRST_NAME, 
                LAST_NAME, 
                PHONE_NUMBER, 
                EMAIL, 
                DOB,GENDER, 
                AADHAR_NUMBER, 
                PAN_NUMBER, 
                ADDRESS_ID
            ) 
            VALUES 
            (
                'UID' || LPAD(USER_ID_SEQ.NEXTVAL, 5, '0'),
                UPPER(P_FIRST_NAME), UPPER(P_LAST_NAME), 
                P_PHONE_NUMBER, UPPER(P_EMAIL), 
                P_DOB, 
                UPPER(P_GENDER), 
                P_AADHAR_NUMBER, 
                P_PAN_NUMBER, 
                V_ADDRESS_ID
            );

            IF SQL%ROWCOUNT > 0 THEN
                DBMS_OUTPUT.PUT_LINE('DATA IS INSERTED');
                
            END IF;
        END IF;
    END ADD_USER;

END USER_PKG;
/