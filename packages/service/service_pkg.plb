create or replace PACKAGE BODY SERVICE_PKG 
IS

    PROCEDURE WITHDRAWAL_MONEY_BY_ACCOUNT_ID
    (
        P_ACCOUNT_ID ACCOUNT.ACCOUNT_ID%TYPE,
        P_WITHDRAW_AMOUNT ACCOUNT.BALANCE%TYPE,
        P_PASSWORD  ACCOUNT.PASSWORD%TYPE

    )
    IS
        V_PASSWORD  ACCOUNT.PASSWORD%TYPE;
        V_BALANCE ACCOUNT.BALANCE%TYPE;
        USER_NAME USERS.FIRST_NAME%TYPE;
        V_IS_LOCKED ACCOUNT.IS_LOCKED%TYPE;
        ACCOUNT_DOESNOT_EXIST EXCEPTION;
        ACCOUNT_LOCKED_EXCEPTION EXCEPTION;
        AUTHENTICATION_FAILED EXCEPTION;
    BEGIN
        IF ACCOUNT_PKG.CHECK_ACCOUNT_ID_EXISTS(P_ACCOUNT_ID) = FALSE THEN
            RAISE ACCOUNT_DOESNOT_EXIST;
        END IF;

        SELECT FIRST_NAME INTO USER_NAME FROM ACCOUNT JOIN USERS ON ACCOUNT.USER_ID=USERS.USER_ID WHERE ACCOUNT.ACCOUNT_ID=P_ACCOUNT_ID;
        SELECT IS_LOCKED INTO V_IS_LOCKED FROM ACCOUNT JOIN USERS ON ACCOUNT.USER_ID=USERS.USER_ID WHERE ACCOUNT.ACCOUNT_ID=P_ACCOUNT_ID;
        SELECT PASSWORD INTO V_PASSWORD FROM ACCOUNT WHERE ACCOUNT_ID = P_ACCOUNT_ID;
        IF V_PASSWORD <> P_PASSWORD THEN
            RAISE AUTHENTICATION_FAILED;
        END IF;

        DELETE_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_ACCOUNT_ID);

        IF V_IS_LOCKED='N' THEN 
            UPDATE ACCOUNT SET BALANCE=BALANCE - P_WITHDRAW_AMOUNT WHERE ACCOUNT_ID=P_ACCOUNT_ID;

            DBMS_OUTPUT.PUT_LINE(P_WITHDRAW_AMOUNT||' IS SUCCESFULLY DEBITED  FROM  '||P_ACCOUNT_ID);
            DBMS_OUTPUT.PUT_LINE('ACCOUNT OWNER: '||USER_NAME);
            TRANSACTION_PKG.ADD_TRANSACTION
                    (
                        P_FROM_ACCOUNT_ID_ => P_ACCOUNT_ID,
                        P_TO_ACCOUNT_ID_ => '',
                        P_AMOUNT_ => P_WITHDRAW_AMOUNT,
                        P_TRANSACTION_TYPE_ => UPPER('withdrawal'),
                        P_STATUS_ => 'Y'
                    );
        ELSE 
            RAISE ACCOUNT_LOCKED_EXCEPTION;
        END IF;
        EXCEPTION 
            WHEN ACCOUNT_DOESNOT_EXIST THEN
                TRANSACTION_PKG.ADD_TRANSACTION
                (
                    P_FROM_ACCOUNT_ID_ => P_ACCOUNT_ID,
                    P_TO_ACCOUNT_ID_ => '',
                    P_AMOUNT_ => P_WITHDRAW_AMOUNT,
                    P_TRANSACTION_TYPE_ => UPPER('withdrawal'),
                    P_STATUS_ => 'N'
                );
                DBMS_OUTPUT.PUT_LINE('ACCOUNT DOESNOT EXIST');
            WHEN ACCOUNT_LOCKED_EXCEPTION THEN 
                DBMS_OUTPUT.PUT_LINE('ACCOUNT IS LOCKED');
            
            WHEN AUTHENTICATION_FAILED THEN
                TRANSACTION_PKG.ADD_TRANSACTION
                (
                    P_FROM_ACCOUNT_ID_ => P_ACCOUNT_ID,
                    P_TO_ACCOUNT_ID_ => '',
                    P_AMOUNT_ => P_WITHDRAW_AMOUNT,
                    P_TRANSACTION_TYPE_ => UPPER('withdrawal'),
                    P_STATUS_ => 'N'
                );
            DBMS_OUTPUT.PUT_LINE('USER PASSWORD DOES NOT MATCH!');
            ADD_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_ACCOUNT_ID);

    END  WITHDRAWAL_MONEY_BY_ACCOUNT_ID;


    PROCEDURE DEPOSIT_MONEY_BY_ACCOUNT_ID
    (
        P_ACCOUNT_ID ACCOUNT.ACCOUNT_ID%TYPE,
        P_DEPOSIT_AMOUNT ACCOUNT.BALANCE%TYPE,
        P_PASSWORD ACCOUNT.PASSWORD%TYPE
    )
    IS
        V_PASSWORD ACCOUNT.PASSWORD%TYPE;
        V_BALANCE ACCOUNT.BALANCE%TYPE;
        USER_NAME USERS.FIRST_NAME%TYPE;
        V_IS_LOCKED ACCOUNT.IS_LOCKED%TYPE;
        ACCOUNT_DOESNOT_EXIST EXCEPTION;
        ACCOUNT_LOCKED_EXCEPTION EXCEPTION;
        AUTHENTICATION_FAILED    EXCEPTION;
    BEGIN
        IF ACCOUNT_PKG.CHECK_ACCOUNT_ID_EXISTS(P_ACCOUNT_ID) = FALSE THEN
            RAISE ACCOUNT_DOESNOT_EXIST;
        END IF;

        SELECT FIRST_NAME INTO USER_NAME FROM ACCOUNT JOIN USERS ON ACCOUNT.USER_ID=USERS.USER_ID WHERE ACCOUNT.ACCOUNT_ID=P_ACCOUNT_ID;
        SELECT IS_LOCKED INTO V_IS_LOCKED FROM ACCOUNT JOIN USERS ON ACCOUNT.USER_ID=USERS.USER_ID WHERE ACCOUNT.ACCOUNT_ID=P_ACCOUNT_ID;
        SELECT PASSWORD INTO V_PASSWORD FROM ACCOUNT WHERE ACCOUNT_ID = P_ACCOUNT_ID;

        IF V_PASSWORD <> P_PASSWORD THEN
            RAISE AUTHENTICATION_FAILED;
        END IF; 

        DELETE_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_ACCOUNT_ID);

        IF V_IS_LOCKED='N' THEN 
            UPDATE ACCOUNT SET BALANCE=BALANCE + P_DEPOSIT_AMOUNT WHERE ACCOUNT_ID=P_ACCOUNT_ID;

            DBMS_OUTPUT.PUT_LINE(P_DEPOSIT_AMOUNT||' IS SUCCESFULLY DEPOSITED  INTO '||P_ACCOUNT_ID);
            DBMS_OUTPUT.PUT_LINE('ACCOUNT OWNER : ' || USER_NAME);

            TRANSACTION_PKG.ADD_TRANSACTION
                    (
                        P_FROM_ACCOUNT_ID_ => '',
                        P_TO_ACCOUNT_ID_ => P_ACCOUNT_ID,
                        P_AMOUNT_ => P_DEPOSIT_AMOUNT,
                        P_TRANSACTION_TYPE_ => 'DEPOSIT',
                        P_STATUS_ => 'Y'
                    );
        ELSE
            RAISE ACCOUNT_LOCKED_EXCEPTION;
        END IF;
        EXCEPTION 
            WHEN ACCOUNT_DOESNOT_EXIST THEN
                TRANSACTION_PKG.ADD_TRANSACTION
                (
                    P_FROM_ACCOUNT_ID_ => '',
                    P_TO_ACCOUNT_ID_ => P_ACCOUNT_ID,
                    P_AMOUNT_ => P_DEPOSIT_AMOUNT,
                    P_TRANSACTION_TYPE_ => 'DEPOSIT',
                    P_STATUS_ => 'N'
                );
            DBMS_OUTPUT.PUT_LINE('ACCOUNT DOESNOT EXIST');
            WHEN ACCOUNT_LOCKED_EXCEPTION THEN 
                DBMS_OUTPUT.PUT_LINE('ACCOUNT IS LOCKED');
            WHEN AUTHENTICATION_FAILED THEN
                TRANSACTION_PKG.ADD_TRANSACTION
                (
                    P_FROM_ACCOUNT_ID_ => '',
                    P_TO_ACCOUNT_ID_ => P_ACCOUNT_ID,
                    P_AMOUNT_ => P_DEPOSIT_AMOUNT,
                    P_TRANSACTION_TYPE_ => 'DEPOSIT',
                    P_STATUS_ => 'N'
                );
                DBMS_OUTPUT.PUT_LINE('USER PASSWORD DOES NOT MATCH!');
                ADD_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_ACCOUNT_ID);
                

    END DEPOSIT_MONEY_BY_ACCOUNT_ID;


    PROCEDURE MONEY_TRANSFER
    (
        P_FROM_ACCOUNT_ID ACCOUNT.ACCOUNT_ID%TYPE,
        P_TO_ACCOUNT_ID  ACCOUNT.ACCOUNT_ID%TYPE,
        P_AMOUNT ACCOUNT.BALANCE%TYPE,
        P_PASSWORD  ACCOUNT.PASSWORD%TYPE
    )
    IS
        V_FROM_CURRENT_BALANCE ACCOUNT.BALANCE%TYPE;
        V_TO_CURRENT_BALANCE ACCOUNT.BALANCE%TYPE;
        V_PASSWORD ACCOUNT.PASSWORD%TYPE;
        V_FROM_CUR_CODE ACCOUNT.CURRENCY_CODE%TYPE;
        V_TO_CUR_CODE ACCOUNT.CURRENCY_CODE%TYPE;
        V_FROM_ER EXCHANGE_CURRENCY.EXCHANGE_RATE%TYPE;
        V_TO_ER EXCHANGE_CURRENCY.EXCHANGE_RATE%TYPE;
        NEW_AMOUNT ACCOUNT.BALANCE%TYPE;
        V_IS_LOCKED_TO ACCOUNT.IS_LOCKED%TYPE;
        V_IS_LOCKED_FROM ACCOUNT.IS_LOCKED%TYPE;
        V_ACTIVE_STATUS ACCOUNT.ACTIVE_STATUS%TYPE;

        SENDER_ACCOUNT_DOESNOT_EXIST EXCEPTION;
        RECIEVER_ACCOUNT_DOESNOT_EXIST EXCEPTION;
        SENDER_ACCOUNT_LOCKED EXCEPTION;
        RECIEVER_ACCOUNT_LOCKED EXCEPTION;
        AUTHENTICATION_FAILED EXCEPTION;
        INSUFFICIENT_BANK_BALANCE EXCEPTION;

    BEGIN
        IF CHECK_ACCOUNT_ID_EXISTS(P_FROM_ACCOUNT_ID) = FALSE THEN
            RAISE SENDER_ACCOUNT_DOESNOT_EXIST;
        END IF;

        IF CHECK_ACCOUNT_ID_EXISTS(P_TO_ACCOUNT_ID) = FALSE THEN
            RAISE RECIEVER_ACCOUNT_DOESNOT_EXIST;
        END IF;   

        V_FROM_CURRENT_BALANCE := GET_BALANCE_BY_ACCOUNT_ID(P_FROM_ACCOUNT_ID);
        V_TO_CURRENT_BALANCE := GET_BALANCE_BY_ACCOUNT_ID(P_TO_ACCOUNT_ID);
        V_PASSWORD := GET_PASSWORD_BY_ACCOUNT_ID(P_FROM_ACCOUNT_ID);

        
        SELECT IS_LOCKED INTO V_IS_LOCKED_FROM FROM ACCOUNT WHERE ACCOUNT_ID = P_FROM_ACCOUNT_ID;
        SELECT IS_LOCKED INTO V_IS_LOCKED_TO FROM ACCOUNT WHERE ACCOUNT_ID = P_TO_ACCOUNT_ID;

        IF V_IS_LOCKED_FROM = 'Y' THEN
            RAISE SENDER_ACCOUNT_LOCKED;
        END IF;

        IF V_IS_LOCKED_TO = 'Y' THEN
            RAISE RECIEVER_ACCOUNT_LOCKED;
        END IF;

        IF P_PASSWORD <> V_PASSWORD THEN
            RAISE AUTHENTICATION_FAILED;
        END IF;
        
        DELETE_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID);

        IF  V_FROM_CURRENT_BALANCE <  P_AMOUNT THEN
            RAISE INSUFFICIENT_BANK_BALANCE;
        END IF;    

        SELECT CURRENCY_CODE INTO V_FROM_CUR_CODE FROM ACCOUNT WHERE ACCOUNT_ID = P_FROM_ACCOUNT_ID;
        SELECT CURRENCY_CODE INTO V_TO_CUR_CODE FROM ACCOUNT WHERE ACCOUNT_ID = P_TO_ACCOUNT_ID;

        SELECT EXCHANGE_RATE INTO V_FROM_ER FROM EXCHANGE_CURRENCY WHERE CURRENCY_CODE = V_FROM_CUR_CODE;
        SELECT EXCHANGE_RATE INTO V_TO_ER FROM EXCHANGE_CURRENCY WHERE CURRENCY_CODE = V_TO_CUR_CODE;

        NEW_AMOUNT := (V_TO_ER / V_FROM_ER) * P_AMOUNT;

        V_FROM_CURRENT_BALANCE := V_FROM_CURRENT_BALANCE - P_AMOUNT;
        V_TO_CURRENT_BALANCE := V_TO_CURRENT_BALANCE + NEW_AMOUNT;

        UPDATE_BALANCE(P_FROM_ACCOUNT_ID, V_FROM_CURRENT_BALANCE);
        UPDATE_BALANCE(P_TO_ACCOUNT_ID, V_TO_CURRENT_BALANCE);
        
        IF SQL%ROWCOUNT > 0 THEN
            DBMS_OUTPUT.PUT_LINE('MONEY TRANSFERED!');
            DBMS_OUTPUT.PUT_LINE(RPAD('SENDER ACCOUNT',25) || P_FROM_ACCOUNT_ID);
            DBMS_OUTPUT.PUT_LINE(RPAD('RECIEVER ACCOUNT',25) || P_TO_ACCOUNT_ID);
            DBMS_OUTPUT.PUT_LINE(RPAD('AMOUNT SENT',25) || P_AMOUNT);
            DBMS_OUTPUT.PUT_LINE(RPAD('TRANSACTION TIME',25) || SYSTIMESTAMP);
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'Y'
            );
        ELSE
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            RAISE_APPLICATION_ERROR(-20505, 'TRANSACTION FAILED');
        END IF;

    EXCEPTION
        WHEN SENDER_ACCOUNT_DOESNOT_EXIST THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE( q'(SENDER ACCOUNT DOESN'T EXIST)');

        WHEN RECIEVER_ACCOUNT_DOESNOT_EXIST THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE( q'(RECIEVER ACCOUNT DOESN'T EXIST)');

        WHEN SENDER_ACCOUNT_LOCKED THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE( 'SENDER ACCOUNT IS LOCKED');

        WHEN RECIEVER_ACCOUNT_LOCKED THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE('RECIEVER ACCOUNT IS LOCKED');

        WHEN AUTHENTICATION_FAILED THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE('USER PASSWORD DOES NOT MATCH!');
            ADD_FAILED_ATTEMPT(P_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID);

        WHEN INSUFFICIENT_BANK_BALANCE THEN
            TRANSACTION_PKG.ADD_TRANSACTION
            (
                P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID,
                P_AMOUNT_ => P_AMOUNT,
                P_TRANSACTION_TYPE_ => 'TRANSFER',
                P_STATUS_ => 'N'
            );
            DBMS_OUTPUT.PUT_LINE('INSUFFICIENT BANK BALANCE!');

    END MONEY_TRANSFER;

--    
-- 
    PROCEDURE SCHEDULED_MONEY_TRANSFER
    IS
        V_PASSWORD ACCOUNT.PASSWORD%TYPE;
        CURSOR ST_CURSOR IS
        SELECT FROM_ACCOUNT_ID, TO_ACCOUNT_ID, AMOUNT, TRANSFER_ID
        FROM SCHEDULED_TRANSFER
        WHERE STATUS = 'N' AND SCHEDULED_DATE = TO_DATE(SYSDATE,'MM-DD-YYYY');
    BEGIN
        FOR ST IN ST_CURSOR
        LOOP
            SELECT PASSWORD INTO V_PASSWORD FROM ACCOUNT WHERE ACCOUNT_ID = ST.FROM_ACCOUNT_ID;
            DBMS_OUTPUT.PUT_LINE(ST.TRANSFER_ID);
            SERVICE_PKG.MONEY_TRANSFER
            (
                P_FROM_ACCOUNT_ID => ST.FROM_ACCOUNT_ID,
                P_TO_ACCOUNT_ID  => ST.TO_ACCOUNT_ID,
                P_AMOUNT => ST.AMOUNT,
                P_PASSWORD  => V_PASSWORD
            );
            UPDATE SCHEDULED_TRANSFER
            SET STATUS = 'Y'
            WHERE TRANSFER_ID = ST.TRANSFER_ID;
        END LOOP;
    END SCHEDULED_MONEY_TRANSFER;   

    PROCEDURE RECURRING_MONEY_TRANSFER
    IS
        V_PASSWORD ACCOUNT.PASSWORD%TYPE;
        CURSOR RP_CURSOR IS
            SELECT FROM_ACCOUNT_ID, TO_ACCOUNT_ID, AMOUNT, RECURRING_ID, INTERVAL_DAYS, END_DATE, NEXT_PAYMENT_DATE
            FROM RECURRING_PAYMENT
            WHERE STATUS = 'N';
    BEGIN
        FOR RP IN RP_CURSOR
        LOOP
            -- Check if the recurring payment should be ended
            IF TRUNC(SYSDATE) = TRUNC(RP.END_DATE) THEN
                UPDATE RECURRING_PAYMENT
                SET STATUS = 'Y'
                WHERE RECURRING_ID = RP.RECURRING_ID;
                
                DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING PAYMENT IS ENDED ', 30) || RP.RECURRING_ID);
                CONTINUE;
            END IF;

            -- Fetch the password for the FROM account
            BEGIN
                SELECT PASSWORD INTO V_PASSWORD 
                FROM ACCOUNT 
                WHERE ACCOUNT_ID = RP.FROM_ACCOUNT_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('Account ID not found: ' || RP.FROM_ACCOUNT_ID);
                    CONTINUE;
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Error fetching password for Account ID: ' || RP.FROM_ACCOUNT_ID);
                    CONTINUE;
            END;

            -- Check if today is the payment date
            IF TRUNC(SYSDATE) = TRUNC(RP.NEXT_PAYMENT_DATE) THEN
                -- Perform the money transfer
                BEGIN
                    SERVICE_PKG.MONEY_TRANSFER(
                        P_FROM_ACCOUNT_ID => RP.FROM_ACCOUNT_ID,
                        P_TO_ACCOUNT_ID => RP.TO_ACCOUNT_ID,
                        P_AMOUNT => RP.AMOUNT,
                        P_PASSWORD => V_PASSWORD
                    );

                    -- Update the next payment date
                    UPDATE RECURRING_PAYMENT
                    SET NEXT_PAYMENT_DATE = NEXT_PAYMENT_DATE +INTERVAL_DAYS
                    WHERE RECURRING_ID = RP.RECURRING_ID;

                    DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING PAYMENT PAID ', 30) || RP.RECURRING_ID);
                    DBMS_OUTPUT.PUT_LINE(RPAD('NEXT RECURRING PAYMENT ON ', 30) || TO_CHAR(RP.NEXT_PAYMENT_DATE,'MM-DD-YYYY'));
             
                                                                                     
                EXCEPTION
                    WHEN OTHERS THEN
                        DBMS_OUTPUT.PUT_LINE('Error performing money transfer for Recurring ID: ' || RP.RECURRING_ID||' '||SQLERRM);
                END;
            END IF;
        END LOOP;
    END RECURRING_MONEY_TRANSFER;

END SERVICE_PKG;
/