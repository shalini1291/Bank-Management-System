create or replace PACKAGE BODY RECURRING_PAYMENT_PKG  
IS
    FUNCTION  CHECK_NULLS_ADD_RECURRING_PAYMENT
    (
        P_FROM_ACCOUNT_ID_ RECURRING_PAYMENT.FROM_ACCOUNT_ID%TYPE,
        P_TO_ACCOUNT_ID_ RECURRING_PAYMENT.TO_ACCOUNT_ID%TYPE,
        P_AMOUNT_ RECURRING_PAYMENT.AMOUNT %TYPE,
        P_INTERVAL_DAYS_ RECURRING_PAYMENT.INTERVAL_DAYS%TYPE,
        P_END_DATE_ RECURRING_PAYMENT.END_DATE%TYPE
    ) 
    RETURN BOOLEAN 
    IS
        BEGIN
        IF P_FROM_ACCOUNT_ID_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20500,'SENDER ACCOUNT ID CANNOT BE NULL');
            RETURN FALSE;
        END IF;

        IF P_TO_ACCOUNT_ID_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20501,'RECEIVER ACCOUNT ID CANNOT BE NULL');
            RETURN FALSE;
        END IF;

        IF P_AMOUNT_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20502,'AMOUNT TO BE DEDUCTED CANNOT BE NULL');
            RETURN FALSE;
        END IF;

        IF P_INTERVAL_DAYS_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20503,'INTERVAL DAYS CANNOT BE NULL');
            RETURN FALSE;
        END IF;

        IF P_END_DATE_ IS NULL THEN 
            RAISE_APPLICATION_ERROR(-20504,'END DATE CANNOT BE NULL');
            RETURN FALSE;
        END IF;
        
        RETURN TRUE;
    END CHECK_NULLS_ADD_RECURRING_PAYMENT;
    
    PROCEDURE ADD_RECURRING_PAYMENT
    (
        P_FROM_ACCOUNT_ID RECURRING_PAYMENT.FROM_ACCOUNT_ID%TYPE,
        P_TO_ACCOUNT_ID RECURRING_PAYMENT.TO_ACCOUNT_ID%TYPE,
        P_AMOUNT RECURRING_PAYMENT.AMOUNT %TYPE,
        P_INTERVAL_DAYS RECURRING_PAYMENT.INTERVAL_DAYS%TYPE,
        P_END_DATE RECURRING_PAYMENT.END_DATE%TYPE
    )
    IS
    BEGIN 
        IF CHECK_NULLS_ADD_RECURRING_PAYMENT(
            P_FROM_ACCOUNT_ID_ => P_FROM_ACCOUNT_ID,
            P_TO_ACCOUNT_ID_ => P_TO_ACCOUNT_ID ,
            P_AMOUNT_ => P_AMOUNT ,
            P_INTERVAL_DAYS_ => P_INTERVAL_DAYS ,
            P_END_DATE_ => P_END_DATE) =TRUE
            THEN

            IF ACCOUNT_PKG.CHECK_ACCOUNT_ID_EXISTS(P_FROM_ACCOUNT_ID)=FALSE THEN
                RAISE_APPLICATION_ERROR(-20310,q'(SENDER ACCOUNT DOESN'T EXIST)');
            END IF;

            IF ACCOUNT_PKG.CHECK_ACCOUNT_ID_EXISTS(P_TO_ACCOUNT_ID)=FALSE THEN
                RAISE_APPLICATION_ERROR(-20311,q'(RECEIVER ACCOUNT DOESN'T EXIST)');
            END IF;


            IF P_END_DATE < (SYSDATE-1) THEN
                RAISE_APPLICATION_ERROR(-20312,q'(THE END DATE CANNOT BE LESS THAN TODAY)');
            END IF;

            INSERT INTO RECURRING_PAYMENT(
                RECURRING_ID,
                FROM_ACCOUNT_ID,
                TO_ACCOUNT_ID,
                AMOUNT,
                INTERVAL_DAYS,
                NEXT_PAYMENT_DATE,
                CREATED_AT,
                END_DATE
            ) VALUES(
                'RECURR'||TO_CHAR(RECURRING_ID_SEQ.NEXTVAL),
                P_FROM_ACCOUNT_ID ,
                P_TO_ACCOUNT_ID ,
                P_AMOUNT,
                P_INTERVAL_DAYS ,
                SYSDATE+P_INTERVAL_DAYS,
                SYSTIMESTAMP,
                P_END_DATE 
            );

        END IF;

        DBMS_OUTPUT.PUT_LINE('DATA IS INSERTED SUCCESFULLY');
        DBMS_OUTPUT.PUT_LINE(RPAD('CREATED AT',18) || ' : ' || SYSTIMESTAMP);
        DBMS_OUTPUT.PUT_LINE(RPAD('FROM ACCOUNT ID ',18) || ' : ' || P_FROM_ACCOUNT_ID);
        DBMS_OUTPUT.PUT_LINE(RPAD('TO ACCOUNT ID ',18) || ' : ' || P_TO_ACCOUNT_ID);
        DBMS_OUTPUT.PUT_LINE(RPAD('AMOUNT ',18) || ' : ' || P_AMOUNT);
        DBMS_OUTPUT.PUT_LINE(RPAD('INTERVAL DAYS ',18) || ' : ' || P_INTERVAL_DAYS);
        DBMS_OUTPUT.PUT_LINE(RPAD('NEXT PAYMENT DATE ',18) || ' : ' || TO_DATE(SYSDATE + P_INTERVAL_DAYS, 'MM-DD-YYYY'));
        DBMS_OUTPUT.PUT_LINE(RPAD('END DATE OF RECURRING PAYMENT ',18) || ' : ' || P_END_DATE);
         
    END ADD_RECURRING_PAYMENT;

END RECURRING_PAYMENT_PKG;
/