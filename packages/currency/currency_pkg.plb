create or replace PACKAGE BODY CURRENCY_PKG IS
    --FUNCTION TO VALIDATE THE COUNTRY NAME
    FUNCTION VALIDATE_COUNTRY(P_COUNTRY_NAME VARCHAR2) RETURN BOOLEAN IS
        BEGIN
            IF REGEXP_LIKE(P_COUNTRY_NAME, '^[A-Za-z]{1,}$') THEN
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        END VALIDATE_COUNTRY;
    -- FUNCTION TO VALIDATE THE CURRENCY CODE
    FUNCTION VALIDATE_CURRENCY_CODE(P_CURRENCY VARCHAR2) RETURN BOOLEAN IS
        BEGIN
            IF LENGTH(P_CURRENCY) = 3  AND REGEXP_LIKE(P_CURRENCY, '^[A-Za-z]{3}$') THEN
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        END VALIDATE_CURRENCY_CODE;
    -- FUNCTION TO CHECK IF THE COUNTRY ALREADY EXISTS
    FUNCTION CHECK_COUNTRY_EXISTS
        (
            P_COUNTRY IN OUT EXCHANGE_CURRENCY.COUNTRY%TYPE
        ) 
        RETURN BOOLEAN
        IS
            V_COUNTRY EXCHANGE_CURRENCY.COUNTRY%TYPE;
        BEGIN
            P_COUNTRY := UPPER(P_COUNTRY);
            SELECT COUNTRY INTO V_COUNTRY FROM  EXCHANGE_CURRENCY WHERE COUNTRY = P_COUNTRY;
            RETURN FALSE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RETURN TRUE;
        END CHECK_COUNTRY_EXISTS;
    -- FUNCTION TO CHECK IF THE CURRENCY CODE ALREADY EXISTS
    FUNCTION CHECK_CURRENCY_CODE_EXISTS(P_CURRENCY_CODE IN OUT EXCHANGE_CURRENCY.CURRENCY_CODE%TYPE) 
        RETURN BOOLEAN 
        IS
            V_CURRENCY_CODE EXCHANGE_CURRENCY.CURRENCY_CODE%TYPE;
        BEGIN
            P_CURRENCY_CODE := UPPER(P_CURRENCY_CODE);
            SELECT CURRENCY_CODE INTO V_CURRENCY_CODE FROM  EXCHANGE_CURRENCY WHERE CURRENCY_CODE = P_CURRENCY_CODE;
            RETURN FALSE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RETURN TRUE;
        END CHECK_CURRENCY_CODE_EXISTS;
    --PROCEDURE TO INSERT ROWS INTO THE EXCHANGE_CURRENCY TABLE
    PROCEDURE  ADD_CURRENCY
    (
        P_COUNTRY IN  EXCHANGE_CURRENCY.COUNTRY%TYPE,
        P_CURRENCY_CODE IN EXCHANGE_CURRENCY.CURRENCY_CODE%TYPE,
        P_EXCHANGE_RATE EXCHANGE_CURRENCY.EXCHANGE_RATE%TYPE
    )
    IS
        V_COUNTRY EXCHANGE_CURRENCY.COUNTRY%TYPE;
        V_CURRENCY_CODE EXCHANGE_CURRENCY.CURRENCY_CODE%TYPE;
    BEGIN

        IF CHECK_NULLS_ADD_CURRENCY
        (
            P_COUNTRY_  => P_COUNTRY,
            P_CURRENCY_CODE_ => P_CURRENCY_CODE,
            P_EXCHANGE_RATE_ => P_EXCHANGE_RATE
        ) = TRUE THEN

            V_COUNTRY := UPPER(P_COUNTRY);
            V_CURRENCY_CODE := UPPER(P_CURRENCY_CODE); 

            IF VALIDATE_COUNTRY(V_COUNTRY) = FALSE THEN
                RAISE_APPLICATION_ERROR(-20604,'INVALID COUNTRY FORMAT, NUMBERS ARE NOT ALLOWED!');
            END IF;

            IF CHECK_COUNTRY_EXISTS(V_COUNTRY) = FALSE THEN
                RAISE_APPLICATION_ERROR(-20605,'COUNTRY ALREADY EXISTS!');
            END IF;        

            IF VALIDATE_CURRENCY_CODE(V_CURRENCY_CODE) = FALSE THEN
                RAISE_APPLICATION_ERROR(-20606,'INVALID CURRENCY CODE FORMAT, NUMBERS NOT ALLOWED');
            END IF;

            IF CHECK_CURRENCY_CODE_EXISTS(V_CURRENCY_CODE) = FALSE THEN
                RAISE_APPLICATION_ERROR(-20607,'CURRENCY CODE ALREADY EXISTS!');
            END IF;

            INSERT INTO EXCHANGE_CURRENCY 
            (
                COUNTRY, 
                CURRENCY_CODE, 
                EXCHANGE_RATE) 
            VALUES
            (   V_COUNTRY, 
                V_CURRENCY_CODE, 
                P_EXCHANGE_RATE);

        END IF;
    END ADD_CURRENCY;

    FUNCTION CHECK_NULLS_ADD_CURRENCY
    (
        P_COUNTRY_   EXCHANGE_CURRENCY.COUNTRY%TYPE,
        P_CURRENCY_CODE_  EXCHANGE_CURRENCY.CURRENCY_CODE%TYPE,
        P_EXCHANGE_RATE_ EXCHANGE_CURRENCY.EXCHANGE_RATE%TYPE
    ) RETURN BOOLEAN
    IS
    BEGIN
        IF P_COUNTRY_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20601, 'COUNTRY IS REQUIRED!');
            RETURN FALSE;
        END IF;

        IF P_CURRENCY_CODE_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20602, 'CURRENCY CODE IS REQUIRED!');
            RETURN FALSE;
        END IF;

        IF P_EXCHANGE_RATE_ IS NULL THEN
            RAISE_APPLICATION_ERROR(-20603, 'EXCHANGE RATE IS REQUIRED!');
            RETURN FALSE;
        END IF;

        RETURN TRUE;
    END CHECK_NULLS_ADD_CURRENCY;

END CURRENCY_PKG;
/