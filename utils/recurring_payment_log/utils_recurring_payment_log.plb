create or replace PACKAGE BODY UTILS_RECURRING_PAYMENT_LOG IS
    PROCEDURE GET_RECURRING_LOG_BY_RECURRING_ID(P_RECURRING_ID RECURRING_PAYMENT_LOG.RECURRING_ID%TYPE)
    IS
        RECURRING_ID_COUNT NUMBER := 0;
        CURSOR RECURRING_PAYMENT_LOG_CURSOR IS
            SELECT * FROM RECURRING_PAYMENT_LOG WHERE RECURRING_ID = P_RECURRING_ID;
    BEGIN
        SELECT COUNT(RECURRING_ID) INTO RECURRING_ID_COUNT FROM RECURRING_PAYMENT_LOG WHERE RECURRING_ID = P_RECURRING_ID;
        IF RECURRING_ID_COUNT = 0 THEN
            RAISE NO_DATA_FOUND;
        ELSE
            DBMS_OUTPUT.PUT_LINE
                (
                    RPAD('RECURRING_ID', 18) ||
                    RPAD('UPDATED_COLUMN', 18) ||
                    RPAD('OLD_VALUE', 18) ||
                    RPAD('NEW_VALUE', 18) ||
                    RPAD('UPDATED_TIME', 18)
                );
            DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
            FOR I_RECURRING_PAYMENT_LOG_CURSOR IN RECURRING_PAYMENT_LOG_CURSOR
            LOOP
                DBMS_OUTPUT.PUT_LINE
                (
                    RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.RECURRING_ID, 18) ||
                    RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.UPDATED_COLUMN, 18) ||
                    RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.OLD_VALUE, 18) ||
                    RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.NEW_VALUE, 18) ||
                    RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.UPDATED_TIME, 18)
                );
            END LOOP;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE TO THE RECURRING ID ' || Q'(')' || P_RECURRING_ID || Q'(')' || ' TILL DATE');
    END GET_RECURRING_LOG_BY_RECURRING_ID;

    PROCEDURE GET_RECURRING_LOG_BY_UPDATED_DATE(P_UPDATED_DATE DATE)
    IS  
        UPDATED_DATE_COUNT NUMBER := 0;
        CURSOR GET_LOG_BY_UPDATED_DATE_CURSOR IS
            SELECT * FROM RECURRING_PAYMENT_LOG WHERE TRUNC(UPDATED_TIME) =  TO_CHAR(P_UPDATED_DATE,'MM/DD/YYYY');
        I_GET_LOG_BY_UPDATED_DATE_CURSOR GET_LOG_BY_UPDATED_DATE_CURSOR%ROWTYPE;
        FUTURE_DATE EXCEPTION;
    BEGIN

        IF P_UPDATED_DATE > SYSDATE THEN
            RAISE FUTURE_DATE;
        END IF;

        SELECT COUNT(TRUNC(UPDATED_TIME)) INTO UPDATED_DATE_COUNT FROM RECURRING_PAYMENT_LOG WHERE TRUNC(UPDATED_TIME) = TO_CHAR(P_UPDATED_DATE,'MM/DD/YYYY');
        IF UPDATED_DATE_COUNT = 0 THEN
            RAISE NO_DATA_FOUND;
        ELSE
            DBMS_OUTPUT.PUT_LINE
                (
                    RPAD('RECURRING_ID', 18) ||
                    RPAD('UPDATED_COLUMN', 18) ||
                    RPAD('OLD_VALUE', 18) ||
                    RPAD('NEW_VALUE', 18) ||
                    RPAD('UPDATED_TIME', 18)
                );
            DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
            OPEN GET_LOG_BY_UPDATED_DATE_CURSOR;
            LOOP 
            FETCH GET_LOG_BY_UPDATED_DATE_CURSOR INTO I_GET_LOG_BY_UPDATED_DATE_CURSOR;
            EXIT WHEN GET_LOG_BY_UPDATED_DATE_CURSOR%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE
            (
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.RECURRING_ID, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.UPDATED_COLUMN, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.OLD_VALUE, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.NEW_VALUE, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.UPDATED_TIME, 18)
            );
            END LOOP;

            -- IF GET_LOG_BY_UPDATED_DATE_CURSOR%ROWCOUNT = 0 THEN
            --     DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE ON THE DATE: ' || P_UPDATED_DATE);
            -- END IF;
            CLOSE GET_LOG_BY_UPDATED_DATE_CURSOR;
        END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE ON THE DATE: ' || P_UPDATED_DATE);
            WHEN FUTURE_DATE THEN
            DBMS_OUTPUT.PUT_LINE('THE GIVEN DATE IS FUTURE DATE GIVE THE PAST DATE');
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('THE ERROR IS: ' || SQLERRM);
    END GET_RECURRING_LOG_BY_UPDATED_DATE;

    PROCEDURE GET_RECURRING_LOG_BY_UPDATED_DATE_RANGE(P_FROM_UPDATED_DATE DATE, P_TO_UPDATED_DATE DATE)
    IS  
        UPDATED_COUNT NUMBER := 0;
        CURSOR GET_LOG_BY_UPDATED_DATE_CURSOR IS
            SELECT * FROM RECURRING_PAYMENT_LOG 
            WHERE TRUNC(UPDATED_TIME) >= TO_DATE(P_FROM_UPDATED_DATE,'MM/DD/YYYY') OR 
            TRUNC(UPDATED_TIME) <= TO_DATE(P_TO_UPDATED_DATE,'MM/DD/YYYY');
        I_GET_LOG_BY_UPDATED_DATE_CURSOR GET_LOG_BY_UPDATED_DATE_CURSOR%ROWTYPE;
        PROPER_DATE_RANGE EXCEPTION;
    BEGIN
        IF P_FROM_UPDATED_DATE > P_TO_UPDATED_DATE THEN
            RAISE PROPER_DATE_RANGE;
        END IF;

        SELECT COUNT(*) INTO UPDATED_COUNT FROM RECURRING_PAYMENT_LOG 
            WHERE TRUNC(UPDATED_TIME) >= TO_DATE(P_FROM_UPDATED_DATE,'MM/DD/YYYY') OR 
            TRUNC(UPDATED_TIME) <= TO_DATE(P_TO_UPDATED_DATE,'MM/DD/YYYY');
        IF UPDATED_COUNT = 0 THEN
            RAISE NO_DATA_FOUND;
        ELSE
            DBMS_OUTPUT.PUT_LINE
                (
                    RPAD('RECURRING_ID', 18) ||
                    RPAD('UPDATED_COLUMN', 18) ||
                    RPAD('OLD_VALUE', 18) ||
                    RPAD('NEW_VALUE', 18) ||
                    RPAD('UPDATED_TIME', 18)
                );
            DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
            OPEN GET_LOG_BY_UPDATED_DATE_CURSOR;
            LOOP 
            FETCH GET_LOG_BY_UPDATED_DATE_CURSOR INTO I_GET_LOG_BY_UPDATED_DATE_CURSOR;
            EXIT WHEN GET_LOG_BY_UPDATED_DATE_CURSOR%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE
            (
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.RECURRING_ID, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.UPDATED_COLUMN, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.OLD_VALUE, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.NEW_VALUE, 18) ||
                RPAD(I_GET_LOG_BY_UPDATED_DATE_CURSOR.UPDATED_TIME, 18)
            );
            END LOOP;

            IF GET_LOG_BY_UPDATED_DATE_CURSOR%ROWCOUNT = 0 THEN
                DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE ON THE RECURRING PAYMENT BETWEEN ' || P_FROM_UPDATED_DATE || ' AND ' || P_TO_UPDATED_DATE);
            END IF;
            CLOSE GET_LOG_BY_UPDATED_DATE_CURSOR;
        END IF;
        

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE ON THE RECURRING PAYMENT BETWEEN ' || P_FROM_UPDATED_DATE || ' AND ' || P_TO_UPDATED_DATE);
            WHEN PROPER_DATE_RANGE THEN
                DBMS_OUTPUT.PUT_LINE('GIVE THE CORRECT DATE RANGE, FROM DATE SHOULD BE LESS THAN TO DATE');
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('THE ERROR IS: ' || SQLERRM);
    END GET_RECURRING_LOG_BY_UPDATED_DATE_RANGE;

    PROCEDURE DISPLAY_RECURRING_PAYMENT_LOG
    IS
        UPDATES_COUNT NUMBER := 0;
        CURSOR RECURRING_PAYMENT_LOG_CURSOR IS
            SELECT * FROM RECURRING_PAYMENT_LOG;
        I_RECURRING_PAYMENT_LOG_CURSOR RECURRING_PAYMENT_LOG_CURSOR%ROWTYPE;
    BEGIN
        SELECT COUNT(*) INTO UPDATES_COUNT FROM RECURRING_PAYMENT_LOG;

        IF UPDATES_COUNT = 0 THEN
            RAISE NO_DATA_FOUND;
        END IF;
        
        DBMS_OUTPUT.PUT_LINE
            (
                RPAD('RECURRING_ID', 18) ||
                RPAD('UPDATED_COLUMN', 18) ||
                RPAD('OLD_VALUE', 18) ||
                RPAD('NEW_VALUE', 18) ||
                RPAD('UPDATED_TIME', 18)
            );
        DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
        OPEN RECURRING_PAYMENT_LOG_CURSOR;
        LOOP
        FETCH RECURRING_PAYMENT_LOG_CURSOR INTO I_RECURRING_PAYMENT_LOG_CURSOR;
        
       EXIT WHEN RECURRING_PAYMENT_LOG_CURSOR%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE
            (
                RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.RECURRING_ID, 18) ||
                RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.UPDATED_COLUMN, 18) ||
                RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.OLD_VALUE, 18) ||
                RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.NEW_VALUE, 18) ||
                RPAD(I_RECURRING_PAYMENT_LOG_CURSOR.UPDATED_TIME, 18)
            );
        END LOOP;
        IF RECURRING_PAYMENT_LOG_CURSOR%ROWCOUNT = 0  THEN
            DBMS_OUTPUT.PUT_LINE('NO UPDATES ON THE RECURRING PAYMENT TABLE YET');
        END IF;

        CLOSE RECURRING_PAYMENT_LOG_CURSOR;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO CHANGES HAVE MADE TO THE RECURRING ID ');
    END DISPLAY_RECURRING_PAYMENT_LOG;

END UTILS_RECURRING_PAYMENT_LOG;
/