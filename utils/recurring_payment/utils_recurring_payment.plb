create or replace PACKAGE BODY UTILS_RECURRING_PAYMENT
IS  

    PROCEDURE  RECURRING_PAYMENT_LOADER
    IS
    BEGIN
        FOR I_RECURRING_PAYMENT IN RECURRING_PAYMENT_CURSOR
        LOOP
            V_RECURRING_PAYMENT_COLLECTION(I_RECURRING_PAYMENT.RECURRING_ID) := I_RECURRING_PAYMENT;
        END LOOP;
    END RECURRING_PAYMENT_LOADER;

    PROCEDURE GET_STATUS_BY_RECURRING_ID(P_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE)
    IS
    V_STATUS RECURRING_PAYMENT.STATUS%TYPE;
    BEGIN
        SELECT STATUS INTO V_STATUS FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        DBMS_OUTPUT.PUT_LINE('THE RECURRING PAYMENT STATUS OF THE RECURRING ID ' || P_RECURRING_ID || ' IS ' || q'{'}' || V_STATUS || q'(')');
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO SUCH RECURRING ID');
    END GET_STATUS_BY_RECURRING_ID;

    PROCEDURE GET_RECURRING_PAYMENTS_BY_DATE(P_NEXT_PAYMENT_DATE RECURRING_PAYMENT.NEXT_PAYMENT_DATE%TYPE)
    IS
        V_COUNT NUMBER := 0;
        CURSOR NEXT_PAYMENT_DATE_CURSOR IS
        SELECT RECURRING_ID, FROM_ACCOUNT_ID, TO_ACCOUNT_ID, AMOUNT, STATUS, END_DATE FROM RECURRING_PAYMENT 
        WHERE TO_CHAR(NEXT_PAYMENT_DATE) = P_NEXT_PAYMENT_DATE;
    BEGIN
        FOR I_NEXT_PAYMENT_DATE IN NEXT_PAYMENT_DATE_CURSOR
        LOOP
            V_COUNT := V_COUNT + 1;
        END LOOP;
        IF V_COUNT > 0 THEN
            DBMS_OUTPUT.PUT_LINE('THE RECURRING PAYMENTS ON THE DATE: ' || P_NEXT_PAYMENT_DATE);
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING_ID',18) || RPAD('FROM_ACCOUNT_ID',18) || RPAD('TO_ACCOUNT_ID',18) || RPAD('AMOUNT',18)
            || RPAD('STATUS', 18) || RPAD('END_DATE',18));
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            FOR I_NEXT_PAYMENT_DATE IN NEXT_PAYMENT_DATE_CURSOR
            LOOP
                DBMS_OUTPUT.PUT_LINE(RPAD(I_NEXT_PAYMENT_DATE.RECURRING_ID,18) || RPAD(I_NEXT_PAYMENT_DATE.FROM_ACCOUNT_ID, 18)
                || RPAD(I_NEXT_PAYMENT_DATE.TO_ACCOUNT_ID, 18) || RPAD(I_NEXT_PAYMENT_DATE.AMOUNT, 18) || RPAD(I_NEXT_PAYMENT_DATE.STATUS, 18)
                || RPAD(I_NEXT_PAYMENT_DATE.END_DATE, 18));
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO RECURRING PAYMENTS SCHEDULED ON THIS DATE: ' || P_NEXT_PAYMENT_DATE);
        END IF;
        
    END GET_RECURRING_PAYMENTS_BY_DATE;

    PROCEDURE GET_ALL_COMPLETED_RECURRING_PAYMENT
    IS
        V_KEY VARCHAR2(40);
        V_KEY_COUNT VARCHAR2(40);
        COMPLETE_COUNT NUMBER := 0;
    BEGIN
        RECURRING_PAYMENT_LOADER;
        V_KEY := V_RECURRING_PAYMENT_COLLECTION.FIRST;
        V_KEY_COUNT := V_RECURRING_PAYMENT_COLLECTION.FIRST;
        WHILE V_KEY_COUNT IS NOT NULL
        LOOP
            IF V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_STATUS = 'Y' THEN
                COMPLETE_COUNT := COMPLETE_COUNT + 1;
            END IF;
            V_KEY_COUNT := V_RECURRING_PAYMENT_COLLECTION.NEXT(V_KEY_COUNT);
        END LOOP;
        
        IF COMPLETE_COUNT > 0 THEN
            DBMS_OUTPUT.PUT_LINE('THE COMPLETED RECURRING PAYMENT DETAILS ARE: ');
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING_ID', 18) || RPAD('FROM_ACCOUNT_ID', 18) ||RPAD('TO_ACCOUNT_ID', 18) ||
            RPAD('AMOUNT', 18) || RPAD('END_DATE', 18) || RPAD('NEXT_PAYMENT_DATE', 18));
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            WHILE V_KEY IS NOT NULL
            LOOP
                IF V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_STATUS = 'Y' THEN
                    DBMS_OUTPUT.PUT_LINE(RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_RECURRING_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_FROM_ACCOUNT_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_TO_ACCOUNT_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_AMOUNT,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_END_DATE,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_NEXT_PAYMENT_DATE,18));
                END IF;
                V_KEY := V_RECURRING_PAYMENT_COLLECTION.NEXT(V_KEY);
            END LOOP;
        
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO COMPLETED RECURRING PAYMENTS');
        END IF;
    END GET_ALL_COMPLETED_RECURRING_PAYMENT;

    PROCEDURE GET_ALL_INCOMPLETE_RECURRING_PAYMENT
    IS
        V_KEY VARCHAR2(40);
        V_KEY_COUNT VARCHAR2(40);
        INCOMPLETE_COUNT NUMBER := 0;
    BEGIN
        RECURRING_PAYMENT_LOADER;
        V_KEY := V_RECURRING_PAYMENT_COLLECTION.FIRST;
        V_KEY_COUNT := V_RECURRING_PAYMENT_COLLECTION.FIRST;
        WHILE V_KEY_COUNT IS NOT NULL
        LOOP
            IF V_RECURRING_PAYMENT_COLLECTION(V_KEY_COUNT).R_STATUS = 'N' THEN
                INCOMPLETE_COUNT := INCOMPLETE_COUNT + 1;
            END IF;
            V_KEY_COUNT := V_RECURRING_PAYMENT_COLLECTION.NEXT(V_KEY_COUNT);
        END LOOP;
        IF INCOMPLETE_COUNT > 0 THEN
            DBMS_OUTPUT.PUT_LINE('THE INCOMPLETE RECURRING PAYMENTS COUNT IS: ' || INCOMPLETE_COUNT);
            DBMS_OUTPUT.PUT_LINE('THE INCOMPLETE RECURRING PAYMENT DETAILS ARE: ');
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING_ID', 18) || RPAD('FROM_ACCOUNT_ID', 18) ||RPAD('TO_ACCOUNT_ID', 18) ||
            RPAD('AMOUNT', 18) || RPAD('END_DATE', 18) || RPAD('NEXT_PAYMENT_DATE', 18));
            DBMS_OUTPUT.PUT_LINE(RPAD('-',108,'-'));
            WHILE V_KEY IS NOT NULL
            LOOP
                IF V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_STATUS = 'N' THEN
                    DBMS_OUTPUT.PUT_LINE(RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_RECURRING_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_FROM_ACCOUNT_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_TO_ACCOUNT_ID,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_AMOUNT,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_END_DATE,18) || 
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_NEXT_PAYMENT_DATE,18));
                END IF;
                V_KEY := V_RECURRING_PAYMENT_COLLECTION.NEXT(V_KEY);
            END LOOP;
        ELSE
            DBMS_OUTPUT.PUT_LINE('NO INCOMPLETE RECURRING PAYMENTS');
        END IF;
    END GET_ALL_INCOMPLETE_RECURRING_PAYMENT;

    PROCEDURE DISPLAY_RECURRING_PAYMENTS
    IS
        V_KEY VARCHAR2(40); 
    BEGIN
        RECURRING_PAYMENT_LOADER;
        V_KEY := V_RECURRING_PAYMENT_COLLECTION.FIRST;
        DBMS_OUTPUT.PUT_LINE(RPAD('RECURRING_ID', 18) || RPAD('FROM_ACCOUNT_ID', 18) ||RPAD('TO_ACCOUNT_ID', 18) ||
            RPAD('AMOUNT', 18) || RPAD('INTERVAL_DAYS', 18) || RPAD('NEXT_PAYMENT_DATE', 18) ||  
            RPAD('STATUS', 15) || RPAD('CREATED_AT', 18) || RPAD('END_DATE', 18));
        DBMS_OUTPUT.PUT_LINE(RPAD('-',159,'-'));
        WHILE V_KEY IS NOT NULL
        LOOP
            DBMS_OUTPUT.PUT_LINE(RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_RECURRING_ID,18) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_FROM_ACCOUNT_ID,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_TO_ACCOUNT_ID,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_AMOUNT,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_INTERVAL_DAYS,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_NEXT_PAYMENT_DATE,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_STATUS,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_CREATED_AT,15) || '| ' ||
                    RPAD(V_RECURRING_PAYMENT_COLLECTION(V_KEY).R_END_DATE,15));
            V_KEY := V_RECURRING_PAYMENT_COLLECTION.NEXT(V_KEY);
        END LOOP;
    END DISPLAY_RECURRING_PAYMENTS;

    PROCEDURE UPDATE_RECURRING_PAYMENT_AMOUNT
    (
        P_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE,
        P_NEW_AMOUNT RECURRING_PAYMENT.AMOUNT%TYPE
    )
    IS
        V_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE := NULL;
        V_AMOUNT RECURRING_PAYMENT.AMOUNT%TYPE;
        NULL_RECURRING_ID EXCEPTION;
        NULL_AMOUNT EXCEPTION;
        SAME_OLD_NEW EXCEPTION;
    BEGIN
        SELECT RECURRING_ID INTO V_RECURRING_ID FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        SELECT AMOUNT INTO V_AMOUNT FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        IF V_RECURRING_ID IS NULL THEN
            RAISE NO_DATA_FOUND;
        ELSE
            IF V_AMOUNT = P_NEW_AMOUNT THEN
                RAISE SAME_OLD_NEW;
                
            ELSE
                UPDATE RECURRING_PAYMENT SET AMOUNT = P_NEW_AMOUNT WHERE RECURRING_ID = P_RECURRING_ID;
                DBMS_OUTPUT.PUT_LINE('RECURRING AMOUNT FOR THE RECURRING ID: ' || P_RECURRING_ID || ' IS CHANGED TO: ' || P_NEW_AMOUNT);
            END IF;
        END IF;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO RECURRING ID WITH ID: ' || P_RECURRING_ID);
            WHEN NULL_RECURRING_ID THEN
                DBMS_OUTPUT.PUT_LINE('RECURRING ID PARAMETER CAN NOT BE NULL');
            WHEN NULL_AMOUNT THEN
                DBMS_OUTPUT.PUT_LINE('AMOUNT PARAMETER CAN NOT BE NULL');
            WHEN SAME_OLD_NEW THEN
                DBMS_OUTPUT.PUT_LINE('OLD AND NEW VALUES ARE SAME');                               
    END UPDATE_RECURRING_PAYMENT_AMOUNT;

    PROCEDURE UPDATE_RECURRING_PAYMENT_END_DATE
    (
        P_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE,
        P_NEW_END_DATE RECURRING_PAYMENT.END_DATE%TYPE
    )
    IS
        V_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE := NULL;
        V_END_DATE RECURRING_PAYMENT.END_DATE%TYPE;
        NULL_RECURRING_ID EXCEPTION;
        NULL_END_DATE EXCEPTION;
        SAME_OLD_NEW EXCEPTION;
    BEGIN
        SELECT RECURRING_ID INTO V_RECURRING_ID FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        SELECT END_DATE INTO V_END_DATE FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        IF V_RECURRING_ID IS NULL THEN
            RAISE NO_DATA_FOUND;
        ELSE
            IF V_END_DATE = P_NEW_END_DATE THEN
                RAISE SAME_OLD_NEW;
            ELSE
                UPDATE RECURRING_PAYMENT SET END_DATE = P_NEW_END_DATE WHERE RECURRING_ID = P_RECURRING_ID;
                DBMS_OUTPUT.PUT_LINE('END DATE FOR THE RECURRING ID: ' || P_RECURRING_ID || ' IS CHANGED TO: ' || P_NEW_END_DATE);
            END IF;
        END IF;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO RECURRING ID WITH ID: ' || P_RECURRING_ID);
            WHEN NULL_RECURRING_ID THEN
                DBMS_OUTPUT.PUT_LINE('RECURRING ID PARAMETER CAN NOT BE NULL');
            WHEN NULL_END_DATE THEN
                DBMS_OUTPUT.PUT_LINE('END DATE PARAMETER CAN NOT BE NULL');
            WHEN SAME_OLD_NEW THEN
                DBMS_OUTPUT.PUT_LINE('OLD AND NEW VALUES ARE SAME');
    END UPDATE_RECURRING_PAYMENT_END_DATE;

    PROCEDURE UPDATE_RECURRING_PAYMENT_INTERVAL_DAYS
    (
        P_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE,
        P_NEW_INTERVAL_DAYS RECURRING_PAYMENT.INTERVAL_DAYS%TYPE
    )
    IS
        V_RECURRING_ID RECURRING_PAYMENT.RECURRING_ID%TYPE := NULL;
        V_INTERVAL_DAYS RECURRING_PAYMENT.INTERVAL_DAYS%TYPE;
        NULL_RECURRING_ID EXCEPTION;
        NULL_NEW_INTERVAL_DAYS EXCEPTION;
        SAME_OLD_NEW EXCEPTION;
    BEGIN
        IF P_RECURRING_ID IS NULL THEN
            RAISE NULL_RECURRING_ID;
        END IF;

        IF P_NEW_INTERVAL_DAYS IS NULL THEN
            RAISE NULL_NEW_INTERVAL_DAYS;
        END IF;

        SELECT RECURRING_ID INTO V_RECURRING_ID FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        SELECT INTERVAL_DAYS INTO V_INTERVAL_DAYS FROM RECURRING_PAYMENT WHERE RECURRING_ID = P_RECURRING_ID;
        IF V_RECURRING_ID IS NULL THEN
            RAISE NO_DATA_FOUND;
        ELSE
            IF V_INTERVAL_DAYS = P_NEW_INTERVAL_DAYS THEN
                RAISE SAME_OLD_NEW;
            ELSE
                UPDATE RECURRING_PAYMENT SET INTERVAL_DAYS = P_NEW_INTERVAL_DAYS WHERE RECURRING_ID = P_RECURRING_ID;
                DBMS_OUTPUT.PUT_LINE('INTERVAL DAYS FOR THE RECURRING ID: ' || P_RECURRING_ID || ' IS CHANGED TO: ' || P_NEW_INTERVAL_DAYS);
            END IF;
        END IF;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO RECURRING ID WITH ID: ' || P_RECURRING_ID);
            WHEN NULL_NEW_INTERVAL_DAYS THEN
                DBMS_OUTPUT.PUT_LINE('INTERVAL DAYS PARAMETER CAN NOT BE NULL');
            WHEN NULL_RECURRING_ID THEN
                DBMS_OUTPUT.PUT_LINE('RECURRING ID PARAMETER CAN NOT BE NULL');
            WHEN SAME_OLD_NEW THEN
                DBMS_OUTPUT.PUT_LINE('OLD AND NEW VALUES ARE SAME');
    END UPDATE_RECURRING_PAYMENT_INTERVAL_DAYS;
END UTILS_RECURRING_PAYMENT;
/